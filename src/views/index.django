<div class="flex flex-col justify-center items-center w-full mx-auto">
  <div class="flex flex-col gap-6 w-fit">
    <div class="flex flex-col gap-2 justify-center items-center">
      <h1 class="text-3xl font-bold text-center">Session Restriction</h1>
      <button
        id="signout"
        onclick="signout()"
        class="w-fit border-2 border-neutral-900 text-xs flex flex-row gap-2 justify-center items-center py-1.5 px-2.5 rounded-md bg-red-500 hover:bg-red-400 text-white disabled:bg-red-400 disabled:cursor-not-allowed"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="w-4 h-4"
        >
          <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
          <polyline points="16 17 21 12 16 7"></polyline>
          <line x1="21" y1="12" x2="9" y2="12"></line>
        </svg>
        <span>Sign Out</span>
      </button>
    </div>
    <div id="sessions-container" class="grid grid-cols-1 md:grid-cols-3 gap-5">
      <p>No Sessions</p>
    </div>
  </div>
</div>

<script>
  function getCookie(name) {
    const cookies = document.cookie.split("; ");
    for (let cookie of cookies) {
      const [key, value] = cookie.split("=");
      if (key === name) return decodeURIComponent(value);
    }
    return null;
  }

  const signoutElement = document.getElementById("signout");

  function deleteCookie(name, path = "") {
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path};`;
  }

  async function signout() {
    signoutElement.disabled = true;

    await fetch("/api/auth/signout", {
      method: "POST",
    })
      .then(() => {
        deleteCookie("access_token", "");
        setTimeout(() => {
          window.location.href = "/signin";
        }, 1500);
      })
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        deleteCookie("access_token", "");
        signoutElement.disabled = false;
      });
  }

  function dateFormatted(dateString) {
    const date = new Date(dateString);
    const formattedDate = date.toLocaleString("en-GB", {
      day: "2-digit",
      month: "short",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: false, // Use 24-hour format
    });

    return formattedDate;
  }

  function parseSSEMessage(message) {
    const lines = message.split("\n");
    const event = {};

    lines.forEach((line) => {
      const [key, value] = line.split(": ");
      if (key && value) {
        event[key.trim()] = value.trim();
      }
    });

    if (event["data"]) {
      event.data = JSON.parse(event.data);
    }

    return event;
  }

  const EventNewSession = "new_session";
  const EventNewSessionApproved = `new_session_approved`;
  const EventNewSessionDeleted = `new_session_deleted`;
  async function fetchSSE() {
    const source = new EventSource("/api/notification/user");

    source.onopen = function (evt) {
      console.log("[OPEN] ", evt);
    };

    source.onmessage = function (evt) {
      console.log("[MESSAGE] ", evt);
    };

    source.onerror = function (evt) {
      console.error("[ERROR] ", evt);
    };

    source.addEventListener(EventNewSession, (evt) => {
      console.log("[NEW SESSION SIGN IN] ", evt);

      const dataRaw = evt.data;
      const sess = /** @type {Session} */ (JSON.parse(dataRaw));

      const elmSessionsContainer =
        document.getElementById("sessions-container");
      const elmSessionContainer = document.createElement("div");
      elmSessionContainer.classList.add("session-container");
      elmSessionContainer.id = `session-${sess.access_token}`;
      elmSessionContainer.innerHTML = generateHtmlSession(sess);
      elmSessionsContainer.appendChild(elmSessionContainer);
    });

    source.addEventListener(EventNewSessionApproved, (evt) => {
      console.log("[NEW SESSION APPROVED] ", evt);
    });

    source.addEventListener(EventNewSessionDeleted, (evt) => {
      console.log("[NEW SESSION DELETED] ", evt);
    });
  }

  /**
   * @typedef {Object} Session
   * @property {string} access_token
   * @property {number} user_id
   * @property {string} role
   * @property {string} ip_v4
   * @property {string} ip_v6
   * @property {string} user_agent
   * @property {string} device
   * @property {string} os
   * @property {boolean} approved
   * @property {string} created_at
   * @property {string} updated_at
   * @property {string} expired_at
   */

  let sessions = /** @type {Session[]} */ ([]);

  /**
   * @param {Session} sess
   * @returns {string}
   */
  function generateHtmlSession(sess) {
    let htmlStr = `<div class="flex flex-col gap-3">
          <div class="w-full">
            <div class="p-1.5 min-w-full inline-block align-middle">
              <div class="overflow-hidden">
                <table class="min-w-full divide-y divide-neutral-200">
                  <thead>
                    <tr>
                      <th
                        scope="col"
                        colspan="2"
                        class="px-4 py-2 text-sm text-center font-medium text-neutral-500 uppercase"
                      >
                        Details
                      </th>
                    </tr>
                  </thead>
                  <tbody id="tbody" class="divide-y divide-neutral-200 text-sm">
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        Access Token
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        ${sess.access_token}
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        User ID
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        #${sess.user_id}
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        Role
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap capital">
                        ${sess.role}
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        IP Address
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        ${sess.ip_v4}
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        Device
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap capital">
                        ${sess.device}, ${sess.os}
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        Approved
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        <span class="badge-${
                          Boolean(sess.approved) ? "true" : "false"
                        }">${sess.approved}</span>
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        Created At
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        ${dateFormatted(sess.created_at)}
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        Updated At
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        ${dateFormatted(sess.updated_at)}
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap font-semibold">
                        Expired At
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap">
                        ${dateFormatted(sess.expired_at)}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>`;

    if (Boolean(sess.approved)) {
      htmlStr += generateHtmlSessionActionsApproved(sess);
    } else {
      htmlStr += generateHtmlSessionActionsUnapproved(sess);
    }

    return htmlStr;
  }

  /**
   * @param {Session} sess
   * @returns {string}
   */
  function generateHtmlSessionActionsApproved(sess) {
    return `
        <div id="actions-${sess.access_token}" class="flex flex-row gap-2 justify-end px-3 pb-4">
          <button
            onclick="deleteSession('${sess.access_token}', ${sess.user_id}, '${sess.role}')"
            class="py-2 px-4 rounded-full bg-red-600 hover:bg-red-500 text-white"
          >
            Delete
          </button>
        </div>`;
  }

  /**
   * @param {Session} sess
   * @returns {string}
   */
  function generateHtmlSessionActionsUnapproved(sess) {
    return `
      <div id="actions-${sess.access_token}" class="flex flex-row gap-2 justify-end px-3 pb-4">
        <button
          onclick="deleteSession('${sess.access_token}', ${sess.user_id}, '${sess.role}')"
          class="py-2 px-4 rounded-full text-blue-600 hover:text-blue-500 font-semibold"
        >
          Delete
        </button>
        <button
          onclick="approveSession('${sess.access_token}', ${sess.user_id}, '${sess.role}')"
          class="py-2 px-4 rounded-full bg-blue-600 hover:bg-blue-500 text-white"
        >
          Approve
        </button>
      </div>`;
  }

  /**
   * @param {Session[]} sessions
   */
  function renderSessions(sessions) {
    console.log(sessions);

    const elmSessionsContainer = document.getElementById("sessions-container");

    if (sessions && sessions.length) {
      elmSessionsContainer.innerHTML = ``;
    }

    for (const sess of sessions || []) {
      const elmSessionContainer = document.createElement("div");
      elmSessionContainer.classList.add("session-container");
      elmSessionContainer.id = `session-${sess.access_token}`;
      elmSessionContainer.innerHTML = generateHtmlSession(sess);

      elmSessionsContainer.appendChild(elmSessionContainer);
    }
  }

  /**
   * @param {string} accessToken
   * @param {number} userId
   * @param {string} role
   */
  async function approveSession(accessToken, userId, role) {
    await fetch("/api/sessions/approve", {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        access_token: accessToken,
        user_id: userId,
        role: role,
      }),
    })
      .then(async (res) => {
        if (res.status !== 200) {
          console.error(res);
          return;
        }
        const resJson = await res.json();
        const resData = /** @type {Session} */ (resJson.data);

        const elmSessionContainer = document.getElementById(
          `session-${resData.access_token}`
        );
        elmSessionContainer.innerHTML = generateHtmlSession(resData);
      })
      .catch((err) => {
        console.error(err);
      });
  }

  /**
   * @param {string} accessToken
   * @param {number} userId
   * @param {string} role
   */
  async function deleteSession(accessToken, userId, role) {
    await fetch("/api/sessions/delete", {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        access_token: accessToken,
        user_id: userId,
        role: role,
      }),
    })
      .then(async (res) => {
        if (res.status !== 200) {
          console.error(res);
          return;
        }
        const resJson = await res.json();
        console.log("Response: ", resJson);

        const elmSessionContainer = document.getElementById(
          `session-${accessToken}`
        );
        elmSessionContainer.remove();
      })
      .catch((err) => {
        console.error(err);
      });
  }

  async function fetchSessions() {
    await fetch("/api/sessions", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then(async (res) => {
        const dataJson = await res.json();

        if (dataJson.data) {
          renderSessions(dataJson.data);
        }
      })
      .catch((err) => {
        console.error(err);
      });
  }

  (async () => {
    await fetchSessions();
    await fetchSSE();
  })();
</script>
